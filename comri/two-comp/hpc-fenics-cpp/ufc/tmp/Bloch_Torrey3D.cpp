// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'quadrature'
//   split:                          True
//   swig_binary:                    'swig'
//   swig_path:                      ''

#include "Bloch_Torrey3D.h"

/// Constructor
bloch_torrey3d_finite_element_0::bloch_torrey3d_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_finite_element_0::~bloch_torrey3d_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* bloch_torrey3d_finite_element_0::signature() const
{
    return "FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return the cell shape
ufc::shape bloch_torrey3d_finite_element_0::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int bloch_torrey3d_finite_element_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int bloch_torrey3d_finite_element_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int bloch_torrey3d_finite_element_0::space_dimension() const
{
    return 1;
}

/// Return the rank of the value space
unsigned int bloch_torrey3d_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int bloch_torrey3d_finite_element_0::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void bloch_torrey3d_finite_element_0::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values.
    *values = 0.0;
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s).
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
}

/// Evaluate all basis functions at given point in cell
void bloch_torrey3d_finite_element_0::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, coordinates, c);
}

/// Evaluate order n derivatives of basis function i at given point in cell
void bloch_torrey3d_finite_element_0::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    
    // Array of basisvalues.
    double basisvalues[1] = {0.0};
    
    // Declare helper variables.
    
    // Compute basisvalues.
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients.
    static const double coefficients0[1] = \
    {1.0};
    
    // Tables of derivatives of the polynomial base (transpose).
    static const double dmats0[1][1] = \
    {{0.0}};
    
    static const double dmats1[1][1] = \
    {{0.0}};
    
    static const double dmats2[1][1] = \
    {{0.0}};
    
    // Compute reference derivatives.
    // Declare pointer to array of derivatives on FIAT element.
    double *derivatives = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      derivatives[r] = 0.0;
    }// end loop over 'r'
    
    // Declare derivative matrix (of polynomial basis).
    double dmats[1][1] = \
    {{1.0}};
    
    // Declare (auxiliary) derivative matrix (of polynomial basis).
    double dmats_old[1][1] = \
    {{1.0}};
    
    // Loop possible derivatives.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      // Resetting dmats values to compute next derivative.
      for (unsigned int t = 0; t < 1; t++)
      {
        for (unsigned int u = 0; u < 1; u++)
        {
          dmats[t][u] = 0.0;
          if (t == u)
          {
          dmats[t][u] = 1.0;
          }
          
        }// end loop over 'u'
      }// end loop over 't'
      
      // Looping derivative order to generate dmats.
      for (unsigned int s = 0; s < n; s++)
      {
        // Updating dmats_old with new values and resetting dmats.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats_old[t][u] = dmats[t][u];
            dmats[t][u] = 0.0;
          }// end loop over 'u'
        }// end loop over 't'
        
        // Update dmats using an inner product.
        if (combinations[r][s] == 0)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 1)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
        if (combinations[r][s] == 2)
        {
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            for (unsigned int tu = 0; tu < 1; tu++)
            {
              dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
            }// end loop over 'tu'
          }// end loop over 'u'
        }// end loop over 't'
        }
        
      }// end loop over 's'
      for (unsigned int s = 0; s < 1; s++)
      {
        for (unsigned int t = 0; t < 1; t++)
        {
          derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
        }// end loop over 't'
      }// end loop over 's'
    }// end loop over 'r'
    
    // Transform derivatives back to physical element
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r] += transform[r][s]*derivatives[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer to array of derivatives on FIAT element
    delete [] derivatives;
    
    // Delete pointer to array of combinations of derivatives and transform
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] combinations[r];
    }// end loop over 'r'
    delete [] combinations;
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      delete [] transform[r];
    }// end loop over 'r'
    delete [] transform;
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void bloch_torrey3d_finite_element_0::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, coordinates, c);
}

/// Evaluate linear functional for dof i on the function f
double bloch_torrey3d_finite_element_0::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
      y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void bloch_torrey3d_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    y[2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

/// Interpolate vertex values from dof values
void bloch_torrey3d_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void bloch_torrey3d_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void bloch_torrey3d_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int bloch_torrey3d_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* bloch_torrey3d_finite_element_0::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* bloch_torrey3d_finite_element_0::create() const
{
    return new bloch_torrey3d_finite_element_0();
}
#endif


/// Constructor
bloch_torrey3d_finite_element_1::bloch_torrey3d_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_finite_element_1::~bloch_torrey3d_finite_element_1()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* bloch_torrey3d_finite_element_1::signature() const
{
    return "FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return the cell shape
ufc::shape bloch_torrey3d_finite_element_1::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int bloch_torrey3d_finite_element_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int bloch_torrey3d_finite_element_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int bloch_torrey3d_finite_element_1::space_dimension() const
{
    return 4;
}

/// Return the rank of the value space
unsigned int bloch_torrey3d_finite_element_1::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
unsigned int bloch_torrey3d_finite_element_1::value_dimension(unsigned int i) const
{
    return 1;
}

/// Evaluate basis function i at given point in cell
void bloch_torrey3d_finite_element_1::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void bloch_torrey3d_finite_element_1::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void bloch_torrey3d_finite_element_1::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void bloch_torrey3d_finite_element_1::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double bloch_torrey3d_finite_element_1::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void bloch_torrey3d_finite_element_1::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

/// Interpolate vertex values from dof values
void bloch_torrey3d_finite_element_1::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void bloch_torrey3d_finite_element_1::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void bloch_torrey3d_finite_element_1::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int bloch_torrey3d_finite_element_1::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* bloch_torrey3d_finite_element_1::create_sub_element(unsigned int i) const
{
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* bloch_torrey3d_finite_element_1::create() const
{
    return new bloch_torrey3d_finite_element_1();
}
#endif


/// Constructor
bloch_torrey3d_finite_element_2::bloch_torrey3d_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_finite_element_2::~bloch_torrey3d_finite_element_2()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* bloch_torrey3d_finite_element_2::signature() const
{
    return "MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) })";
}

/// Return the cell shape
ufc::shape bloch_torrey3d_finite_element_2::cell_shape() const
{
    return ufc::tetrahedron;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the cell shape
unsigned int bloch_torrey3d_finite_element_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the cell shape
unsigned int bloch_torrey3d_finite_element_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the finite element function space
unsigned int bloch_torrey3d_finite_element_2::space_dimension() const
{
    return 16;
}

/// Return the rank of the value space
unsigned int bloch_torrey3d_finite_element_2::value_rank() const
{
    return 1;
}

/// Return the dimension of the value space for axis i
unsigned int bloch_torrey3d_finite_element_2::value_dimension(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return 4;
        break;
      }
    }
    
    return 0;
}

/// Evaluate basis function i at given point in cell
void bloch_torrey3d_finite_element_2::evaluate_basis(unsigned int i,
                                   double* values,
                                   const double* coordinates,
                                   const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
}

/// Evaluate all basis functions at given point in cell
void bloch_torrey3d_finite_element_2::evaluate_basis_all(double* values,
                                       const double* coordinates,
                                       const ufc::cell& c) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 16; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 4; s++)
      {
        values[r*4 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point in cell
void bloch_torrey3d_finite_element_2::evaluate_basis_derivatives(unsigned int i,
                                               unsigned int n,
                                               double* values,
                                               const double* coordinates,
                                               const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Compute constants
    const double C0 = x[3][0] + x[2][0] + x[1][0] - x[0][0];
    const double C1 = x[3][1] + x[2][1] + x[1][1] - x[0][1];
    const double C2 = x[3][2] + x[2][2] + x[1][2] - x[0][2];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*coordinates[0] - C0) + d_10*(2.0*coordinates[1] - C1) + d_20*(2.0*coordinates[2] - C2)) / detJ;
    double Y = (d_01*(2.0*coordinates[0] - C0) + d_11*(2.0*coordinates[1] - C1) + d_21*(2.0*coordinates[2] - C2)) / detJ;
    double Z = (d_02*(2.0*coordinates[0] - C0) + d_12*(2.0*coordinates[1] - C1) + d_22*(2.0*coordinates[2] - C2)) / detJ;
    
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K_00, K_01, K_02}, {K_10, K_11, K_12}, {K_20, K_21, K_22}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
}

/// Evaluate order n derivatives of all basis functions at given point in cell
void bloch_torrey3d_finite_element_2::evaluate_basis_derivatives_all(unsigned int n,
                                                   double* values,
                                                   const double* coordinates,
                                                   const ufc::cell& c) const
{
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[4*num_derivatives];
    for (unsigned int r = 0; r < 4*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 16; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 4*num_derivatives; s++)
      {
        values[r*4*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
}

/// Evaluate linear functional for dof i on the function f
double bloch_torrey3d_finite_element_2::evaluate_dof(unsigned int i,
                                   const ufc::function& f,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[4];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      y[2] = x[0][2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 13:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      y[2] = x[1][2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 14:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      y[2] = x[2][2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 15:
      {
        y[0] = x[3][0];
      y[1] = x[3][1];
      y[2] = x[3][2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void bloch_torrey3d_finite_element_2::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation.
    double vals[4];
    
    // Declare variable for physical coordinates.
    double y[3];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
    y[0] = x[0][0];
    y[1] = x[0][1];
    y[2] = x[0][2];
    f.evaluate(vals, y, c);
    values[12] = vals[3];
    y[0] = x[1][0];
    y[1] = x[1][1];
    y[2] = x[1][2];
    f.evaluate(vals, y, c);
    values[13] = vals[3];
    y[0] = x[2][0];
    y[1] = x[2][1];
    y[2] = x[2][2];
    f.evaluate(vals, y, c);
    values[14] = vals[3];
    y[0] = x[3][0];
    y[1] = x[3][1];
    y[2] = x[3][2];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
}

/// Interpolate vertex values from dof values
void bloch_torrey3d_finite_element_2::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    vertex_values[12] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[9] = dof_values[6];
    vertex_values[13] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[6] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[14] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[11] = dof_values[14];
    vertex_values[15] = dof_values[15];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Map coordinate xhat from reference cell to coordinate x in cell
void bloch_torrey3d_finite_element_2::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void bloch_torrey3d_finite_element_2::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
}
#endif
/// Return the number of sub elements (for a mixed element)
unsigned int bloch_torrey3d_finite_element_2::num_sub_elements() const
{
    return 4;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* bloch_torrey3d_finite_element_2::create_sub_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Create a new class instance
ufc::finite_element* bloch_torrey3d_finite_element_2::create() const
{
    return new bloch_torrey3d_finite_element_2();
}
#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
bloch_torrey3d_dofmap_0::bloch_torrey3d_dofmap_0() : ufc::dofmap()
#else
bloch_torrey3d_dofmap_0::bloch_torrey3d_dofmap_0() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
bloch_torrey3d_dofmap_0::~bloch_torrey3d_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* bloch_torrey3d_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool bloch_torrey3d_dofmap_0::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool bloch_torrey3d_dofmap_0::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[3];
    return false;
}

/// Initialize dofmap for given cell
void bloch_torrey3d_dofmap_0::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void bloch_torrey3d_dofmap_0::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int bloch_torrey3d_dofmap_0::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int bloch_torrey3d_dofmap_0::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int bloch_torrey3d_dofmap_0::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int bloch_torrey3d_dofmap_0::local_dimension(const ufc::cell& c) const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int bloch_torrey3d_dofmap_0::max_local_dimension() const
{
    return 1;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int bloch_torrey3d_dofmap_0::local_dimension() const
{
    return 1;
}

/// Return the maximum dimension of the local finite element function space
unsigned int bloch_torrey3d_dofmap_0::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int bloch_torrey3d_dofmap_0::num_facet_dofs() const
{
    return 0;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int bloch_torrey3d_dofmap_0::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void bloch_torrey3d_dofmap_0::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[3][0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void bloch_torrey3d_dofmap_0::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void bloch_torrey3d_dofmap_0::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void bloch_torrey3d_dofmap_0::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0] + 0.25*x[3][0];
    coordinates[0][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1] + 0.25*x[3][1];
    coordinates[0][2] = 0.25*x[0][2] + 0.25*x[1][2] + 0.25*x[2][2] + 0.25*x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int bloch_torrey3d_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* bloch_torrey3d_dofmap_0::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* bloch_torrey3d_dofmap_0::create() const
{
    return new bloch_torrey3d_dofmap_0();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int bloch_torrey3d_dofmap_0::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* bloch_torrey3d_dofmap_0::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
bloch_torrey3d_dofmap_1::bloch_torrey3d_dofmap_1() : ufc::dofmap()
#else
bloch_torrey3d_dofmap_1::bloch_torrey3d_dofmap_1() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
bloch_torrey3d_dofmap_1::~bloch_torrey3d_dofmap_1()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* bloch_torrey3d_dofmap_1::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool bloch_torrey3d_dofmap_1::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool bloch_torrey3d_dofmap_1::init_mesh(const ufc::mesh& m)
{
    _global_dimension = m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void bloch_torrey3d_dofmap_1::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void bloch_torrey3d_dofmap_1::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int bloch_torrey3d_dofmap_1::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int bloch_torrey3d_dofmap_1::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int bloch_torrey3d_dofmap_1::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int bloch_torrey3d_dofmap_1::local_dimension(const ufc::cell& c) const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int bloch_torrey3d_dofmap_1::max_local_dimension() const
{
    return 4;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int bloch_torrey3d_dofmap_1::local_dimension() const
{
    return 4;
}

/// Return the maximum dimension of the local finite element function space
unsigned int bloch_torrey3d_dofmap_1::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int bloch_torrey3d_dofmap_1::num_facet_dofs() const
{
    return 3;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int bloch_torrey3d_dofmap_1::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void bloch_torrey3d_dofmap_1::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void bloch_torrey3d_dofmap_1::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void bloch_torrey3d_dofmap_1::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void bloch_torrey3d_dofmap_1::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int bloch_torrey3d_dofmap_1::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* bloch_torrey3d_dofmap_1::create_sub_dofmap(unsigned int i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* bloch_torrey3d_dofmap_1::create() const
{
    return new bloch_torrey3d_dofmap_1();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int bloch_torrey3d_dofmap_1::num_sub_dof_maps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* bloch_torrey3d_dofmap_1::create_sub_dof_map(unsigned int i) const
{
    return 0;
}

#endif

/// Constructor


#ifndef UFC_BACKWARD_COMPATIBILITY
bloch_torrey3d_dofmap_2::bloch_torrey3d_dofmap_2() : ufc::dofmap()
#else
bloch_torrey3d_dofmap_2::bloch_torrey3d_dofmap_2() : ufc::dof_map()
#endif
{
    _global_dimension = 0;
}

/// Destructor
bloch_torrey3d_dofmap_2::~bloch_torrey3d_dofmap_2()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* bloch_torrey3d_dofmap_2::signature() const
{
    return "FFC dofmap for MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) })";
}

/// Return true iff mesh entities of topological dimension d are needed
bool bloch_torrey3d_dofmap_2::needs_mesh_entities(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
}

/// Initialize dofmap for mesh (return true iff init_cell() is needed)
bool bloch_torrey3d_dofmap_2::init_mesh(const ufc::mesh& m)
{
    _global_dimension = 4*m.num_entities[0];
    return false;
}

/// Initialize dofmap for given cell
void bloch_torrey3d_dofmap_2::init_cell(const ufc::mesh& m,
                              const ufc::cell& c)
{
    // Do nothing
}

/// Finish initialization of dofmap for cells
void bloch_torrey3d_dofmap_2::init_cell_finalize()
{
    // Do nothing
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the topological dimension of the associated cell shape
unsigned int bloch_torrey3d_dofmap_2::topological_dimension() const
{
    return 3;
}

/// Return the geometric dimension of the associated cell shape
unsigned int bloch_torrey3d_dofmap_2::geometric_dimension() const
{
    return 3;
}
#endif
/// Return the dimension of the global finite element function space
unsigned int bloch_torrey3d_dofmap_2::global_dimension() const
{
    return _global_dimension;
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the dimension of the local finite element function space for a cell
unsigned int bloch_torrey3d_dofmap_2::local_dimension(const ufc::cell& c) const
{
    return 16;
}

/// Return the maximum dimension of the local finite element function space
unsigned int bloch_torrey3d_dofmap_2::max_local_dimension() const
{
    return 16;
}
#else

/// Return the dimension of the local finite element function space for a cell
unsigned int bloch_torrey3d_dofmap_2::local_dimension() const
{
    return 16;
}

/// Return the maximum dimension of the local finite element function space
unsigned int bloch_torrey3d_dofmap_2::geometric_dimension() const
{
    return 3;
}

#endif
/// Return the number of dofs on each cell facet
unsigned int bloch_torrey3d_dofmap_2::num_facet_dofs() const
{
    return 12;
}

/// Return the number of dofs associated with each cell entity of dimension d
unsigned int bloch_torrey3d_dofmap_2::num_entity_dofs(unsigned int d) const
{
    switch (d)
    {
    case 0:
      {
        return 4;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void bloch_torrey3d_dofmap_2::tabulate_dofs(unsigned int* dofs,
                                  const ufc::mesh& m,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    dofs[15] = offset + c.entity_indices[0][3];
    offset += m.num_entities[0];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void bloch_torrey3d_dofmap_2::tabulate_facet_dofs(unsigned int* dofs,
                                        unsigned int facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void bloch_torrey3d_dofmap_2::tabulate_entity_dofs(unsigned int* dofs,
                                  unsigned int d, unsigned int i) const
{
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void bloch_torrey3d_dofmap_2::tabulate_coordinates(double** coordinates,
                                         const ufc::cell& c) const
{
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[0][2] = x[0][2];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[1][2] = x[1][2];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[2][2] = x[2][2];
    coordinates[3][0] = x[3][0];
    coordinates[3][1] = x[3][1];
    coordinates[3][2] = x[3][2];
    coordinates[4][0] = x[0][0];
    coordinates[4][1] = x[0][1];
    coordinates[4][2] = x[0][2];
    coordinates[5][0] = x[1][0];
    coordinates[5][1] = x[1][1];
    coordinates[5][2] = x[1][2];
    coordinates[6][0] = x[2][0];
    coordinates[6][1] = x[2][1];
    coordinates[6][2] = x[2][2];
    coordinates[7][0] = x[3][0];
    coordinates[7][1] = x[3][1];
    coordinates[7][2] = x[3][2];
    coordinates[8][0] = x[0][0];
    coordinates[8][1] = x[0][1];
    coordinates[8][2] = x[0][2];
    coordinates[9][0] = x[1][0];
    coordinates[9][1] = x[1][1];
    coordinates[9][2] = x[1][2];
    coordinates[10][0] = x[2][0];
    coordinates[10][1] = x[2][1];
    coordinates[10][2] = x[2][2];
    coordinates[11][0] = x[3][0];
    coordinates[11][1] = x[3][1];
    coordinates[11][2] = x[3][2];
    coordinates[12][0] = x[0][0];
    coordinates[12][1] = x[0][1];
    coordinates[12][2] = x[0][2];
    coordinates[13][0] = x[1][0];
    coordinates[13][1] = x[1][1];
    coordinates[13][2] = x[1][2];
    coordinates[14][0] = x[2][0];
    coordinates[14][1] = x[2][1];
    coordinates[14][2] = x[2][2];
    coordinates[15][0] = x[3][0];
    coordinates[15][1] = x[3][1];
    coordinates[15][2] = x[3][2];
}

#ifndef UFC_BACKWARD_COMPATIBILITY
/// Return the number of sub dofmaps (for a mixed element)
unsigned int bloch_torrey3d_dofmap_2::num_sub_dofmaps() const
{
    return 4;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* bloch_torrey3d_dofmap_2::create_sub_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

/// Create a new class instance
ufc::dofmap* bloch_torrey3d_dofmap_2::create() const
{
    return new bloch_torrey3d_dofmap_2();
}
#else

/// Return the number of sub dofmaps (for a mixed element)
unsigned int bloch_torrey3d_dofmap_2::num_sub_dof_maps() const
{
    return 4;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dof_map* bloch_torrey3d_dofmap_2::create_sub_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}

#endif

/// Constructor
bloch_torrey3d_cell_integral_0_0::bloch_torrey3d_cell_integral_0_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_cell_integral_0_0::~bloch_torrey3d_cell_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void bloch_torrey3d_cell_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W24[24] = {0.00665379170969465, 0.00665379170969465, 0.00665379170969465, 0.00665379170969465, 0.00167953517588678, 0.00167953517588678, 0.00167953517588678, 0.00167953517588678, 0.0092261969239424, 0.0092261969239424, 0.0092261969239424, 0.0092261969239424, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428};
    // Quadrature points on the UFC reference element: (0.356191386222545, 0.214602871259152, 0.214602871259152), (0.214602871259152, 0.214602871259152, 0.214602871259152), (0.214602871259152, 0.214602871259152, 0.356191386222545), (0.214602871259152, 0.356191386222545, 0.214602871259152), (0.877978124396166, 0.0406739585346113, 0.0406739585346113), (0.0406739585346113, 0.0406739585346113, 0.0406739585346113), (0.0406739585346113, 0.0406739585346113, 0.877978124396166), (0.0406739585346113, 0.877978124396166, 0.0406739585346113), (0.0329863295731731, 0.322337890142276, 0.322337890142276), (0.322337890142276, 0.322337890142276, 0.322337890142276), (0.322337890142276, 0.322337890142276, 0.0329863295731731), (0.322337890142276, 0.0329863295731731, 0.322337890142276), (0.269672331458316, 0.0636610018750175, 0.0636610018750175), (0.0636610018750175, 0.269672331458316, 0.0636610018750175), (0.0636610018750175, 0.0636610018750175, 0.269672331458316), (0.603005664791649, 0.0636610018750175, 0.0636610018750175), (0.0636610018750175, 0.603005664791649, 0.0636610018750175), (0.0636610018750175, 0.0636610018750175, 0.603005664791649), (0.0636610018750175, 0.269672331458316, 0.603005664791649), (0.269672331458316, 0.603005664791649, 0.0636610018750175), (0.603005664791649, 0.0636610018750175, 0.269672331458316), (0.0636610018750175, 0.603005664791649, 0.269672331458316), (0.269672331458316, 0.0636610018750175, 0.603005664791649), (0.603005664791649, 0.269672331458316, 0.0636610018750175)
    
    // Value of basis functions at quadrature points.
    static const double FE0[24][4] = \
    {{0.214602871259152, 0.356191386222545, 0.214602871259152, 0.214602871259152},
    {0.356191386222545, 0.214602871259152, 0.214602871259152, 0.214602871259152},
    {0.214602871259152, 0.214602871259152, 0.214602871259152, 0.356191386222545},
    {0.214602871259152, 0.214602871259152, 0.356191386222545, 0.214602871259152},
    {0.0406739585346115, 0.877978124396166, 0.0406739585346114, 0.0406739585346113},
    {0.877978124396166, 0.0406739585346112, 0.0406739585346114, 0.0406739585346113},
    {0.0406739585346115, 0.0406739585346113, 0.0406739585346113, 0.877978124396166},
    {0.0406739585346115, 0.0406739585346113, 0.877978124396166, 0.0406739585346113},
    {0.322337890142276, 0.0329863295731731, 0.322337890142276, 0.322337890142276},
    {0.0329863295731729, 0.322337890142276, 0.322337890142276, 0.322337890142276},
    {0.322337890142276, 0.322337890142276, 0.322337890142276, 0.0329863295731731},
    {0.322337890142276, 0.322337890142276, 0.0329863295731731, 0.322337890142276},
    {0.603005664791649, 0.269672331458316, 0.0636610018750175, 0.0636610018750175},
    {0.603005664791649, 0.0636610018750174, 0.269672331458316, 0.0636610018750175},
    {0.603005664791649, 0.0636610018750175, 0.0636610018750175, 0.269672331458316},
    {0.269672331458316, 0.603005664791649, 0.0636610018750175, 0.0636610018750175},
    {0.269672331458316, 0.0636610018750175, 0.603005664791649, 0.0636610018750175},
    {0.269672331458316, 0.0636610018750175, 0.0636610018750175, 0.603005664791649},
    {0.0636610018750176, 0.0636610018750175, 0.269672331458316, 0.603005664791649},
    {0.0636610018750176, 0.269672331458316, 0.603005664791649, 0.0636610018750175},
    {0.0636610018750177, 0.603005664791649, 0.0636610018750175, 0.269672331458316},
    {0.0636610018750176, 0.0636610018750175, 0.603005664791649, 0.269672331458316},
    {0.0636610018750177, 0.269672331458316, 0.0636610018750175, 0.603005664791649},
    {0.0636610018750177, 0.603005664791649, 0.269672331458316, 0.0636610018750175}};
    
    // Array of non-zero columns
    static const unsigned int nzc4[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc0[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[4] = {12, 13, 14, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc8[4] = {8, 9, 10, 11};
    
    static const double FE2_C0_D001[24][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {12, 14};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc3[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc15[2] = {12, 13};
    
    // Array of non-zero columns
    static const unsigned int nzc11[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {12, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 256; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 126.
    double G[16];
    G[0] = det*w[0][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[1] = det*w[0][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[2] = det*w[0][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[3] = det*w[0][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[4] = det*w[0][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[5] = det*w[0][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[6] = det*(K_20*K_20 + K_21*K_21 + K_22*K_22 - w[0][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[7] = det*(K_10*K_20 + K_11*K_21 + K_12*K_22 - w[0][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[8] = det*(K_00*K_20 + K_01*K_21 + K_02*K_22 - w[0][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[9] = det*(K_10*K_10 + K_11*K_11 + K_12*K_12 - w[0][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[10] = det*(K_00*K_10 + K_01*K_11 + K_02*K_12 - w[0][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[11] = det*(K_00*K_00 + K_01*K_01 + K_02*K_02 - w[0][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[12] = det*(1.0 - w[0][0]);
    G[13] = det*(w[0][0]-1.0);
    G[14] = det*w[0][0];
    G[15] =  - det*w[0][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 22176
    for (unsigned int ip = 0; ip < 24; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[6][r];
        F1 += FE0[ip][r]*w[1][r];
        F2 += FE0[ip][r]*w[2][r];
        F3 += FE0[ip][r]*w[3][r];
        F4 += FE0[ip][r]*w[4][r];
        F5 += FE0[ip][r]*w[7][r];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 60
      double I[18];
      // Number of operations: 3
      I[0] = F0*F4*G[0]*W24[ip];
      
      // Number of operations: 3
      I[1] = F0*F4*G[1]*W24[ip];
      
      // Number of operations: 3
      I[2] = F0*F4*G[2]*W24[ip];
      
      // Number of operations: 3
      I[3] = F0*F4*G[3]*W24[ip];
      
      // Number of operations: 3
      I[4] = F0*F4*G[4]*W24[ip];
      
      // Number of operations: 3
      I[5] = F0*F4*G[5]*W24[ip];
      
      // Number of operations: 3
      I[6] = F0*F4*G[6]*W24[ip];
      
      // Number of operations: 3
      I[7] = F0*F4*G[7]*W24[ip];
      
      // Number of operations: 3
      I[8] = F0*F4*G[8]*W24[ip];
      
      // Number of operations: 3
      I[9] = F0*F4*G[9]*W24[ip];
      
      // Number of operations: 3
      I[10] = F0*F4*G[10]*W24[ip];
      
      // Number of operations: 3
      I[11] = F0*F4*G[11]*W24[ip];
      
      // Number of operations: 2
      I[12] = G[12]*W24[ip]/F5;
      
      // Number of operations: 5
      I[13] = F0*F1*F2*F3*G[13]*W24[ip];
      
      // Number of operations: 2
      I[14] = G[14]*W24[ip]/F5;
      
      // Number of operations: 5
      I[15] = F0*F1*F2*F3*G[14]*W24[ip];
      
      // Number of operations: 5
      I[16] = F0*F1*F2*F3*G[12]*W24[ip];
      
      // Number of operations: 5
      I[17] = F0*F1*F2*F3*G[15]*W24[ip];
      
      
      // Number of operations for primary indices: 432
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*16 + nzc10[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc10[j]*16 + nzc11[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc10[j]*16 + nzc9[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc11[j]*16 + nzc10[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc11[j]*16 + nzc11[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc11[j]*16 + nzc9[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc13[j]*16 + nzc13[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc13[j]*16 + nzc14[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc13[j]*16 + nzc15[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc14[j]*16 + nzc13[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc14[j]*16 + nzc14[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc14[j]*16 + nzc15[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc15[j]*16 + nzc13[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc15[j]*16 + nzc14[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc15[j]*16 + nzc15[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc1[j]*16 + nzc1[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc1[j]*16 + nzc2[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc1[j]*16 + nzc3[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc2[j]*16 + nzc1[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc2[j]*16 + nzc2[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc2[j]*16 + nzc3[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc3[j]*16 + nzc1[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc3[j]*16 + nzc2[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc3[j]*16 + nzc3[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc5[j]*16 + nzc5[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc5[j]*16 + nzc6[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc5[j]*16 + nzc7[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc6[j]*16 + nzc5[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc6[j]*16 + nzc6[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc6[j]*16 + nzc7[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc7[j]*16 + nzc5[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc7[j]*16 + nzc6[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc7[j]*16 + nzc7[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc9[j]*16 + nzc10[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc9[j]*16 + nzc11[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc9[j]*16 + nzc9[k]] += FE2_C0_D001[ip][j]*FE2_C0_D001[ip][k]*I[5];
        }// end loop over 'k'
      }// end loop over 'j'
      
      // Number of operations for primary indices: 384
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc0[j]*16 + nzc0[k]] += FE0[ip][j]*FE0[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc0[j]*16 + nzc4[k]] += FE0[ip][j]*FE0[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc12[j]*16 + nzc12[k]] += FE0[ip][j]*FE0[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc12[j]*16 + nzc8[k]] += FE0[ip][j]*FE0[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc4[j]*16 + nzc0[k]] += FE0[ip][j]*FE0[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc4[j]*16 + nzc4[k]] += FE0[ip][j]*FE0[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc8[j]*16 + nzc12[k]] += FE0[ip][j]*FE0[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc8[j]*16 + nzc8[k]] += FE0[ip][j]*FE0[ip][k]*I[14];
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void bloch_torrey3d_cell_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
bloch_torrey3d_interior_facet_integral_0_0::bloch_torrey3d_interior_facet_integral_0_0() : ufc::interior_facet_integral()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_interior_facet_integral_0_0::~bloch_torrey3d_interior_facet_integral_0_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local interior facet
void bloch_torrey3d_interior_facet_integral_0_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c0,
                                    const ufc::cell& c1,
                                    unsigned int facet0,
                                    unsigned int facet1) const
{
    // Extract vertex coordinates
    const double * const * x0 = c0.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet0][0];
    const unsigned int v1 = face_vertices[facet0][1];
    const unsigned int v2 = face_vertices[facet0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x0[v0][1]*x0[v1][2] + x0[v0][2]*x0[v2][1] + x0[v1][1]*x0[v2][2]) - (x0[v2][1]*x0[v1][2] + x0[v2][2]*x0[v0][1] + x0[v1][1]*x0[v0][2]);
    
    const double a1 = (x0[v0][2]*x0[v1][0] + x0[v0][0]*x0[v2][2] + x0[v1][2]*x0[v2][0]) - (x0[v2][2]*x0[v1][0] + x0[v2][0]*x0[v0][2] + x0[v1][2]*x0[v0][0]);
    
    const double a2 = (x0[v0][0]*x0[v1][1] + x0[v0][1]*x0[v2][0] + x0[v1][0]*x0[v2][1]) - (x0[v2][0]*x0[v1][1] + x0[v2][1]*x0[v0][0] + x0[v1][0]*x0[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Value of basis functions at quadrature points.
    static const double FE0_f0[6][3] = \
    {{0.09157621350977, 0.816847572980459, 0.091576213509771},
    {0.0915762135097701, 0.091576213509771, 0.816847572980459},
    {0.816847572980458, 0.091576213509771, 0.091576213509771},
    {0.445948490915965, 0.10810301816807, 0.445948490915965},
    {0.445948490915965, 0.445948490915965, 0.10810301816807},
    {0.10810301816807, 0.445948490915965, 0.445948490915965}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc3[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc7[3] = {13, 14, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc13[3] = {4, 5, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc12[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc15[3] = {12, 13, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc14[3] = {8, 9, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc18[3] = {8, 9, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc19[3] = {12, 13, 14};
    
    // Array of non-zero columns
    static const unsigned int nzc16[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc17[3] = {4, 5, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc8[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc9[3] = {4, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc10[3] = {8, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc11[3] = {12, 14, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 1024; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 8.
    double G[2];
    G[0] = 0.5*std::abs((w[0][0] - w[0][1]))*det;
    G[1] = -0.5*std::abs((w[0][0] - w[0][1]))*det;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet0)
    {
    case 0:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc0[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc0[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc0[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc0[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc4[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc5[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc4[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc6[j]*32 + nzc6[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc5[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc7[j]*32 + nzc7[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc1[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc1[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc1[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc1[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc10[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc11[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc10[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc8[j]*32 + nzc8[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc11[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc9[j]*32 + nzc9[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc2[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc2[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc2[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc2[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc12[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc13[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc12[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc14[j]*32 + nzc14[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc13[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc15[j]*32 + nzc15[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc3[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc4[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc5[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc4[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc6[j] + 16)*32 + (nzc6[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc5[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc7[j] + 16)*32 + (nzc7[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc3[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc10[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc11[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc10[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc8[j] + 16)*32 + (nzc8[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc11[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc9[j] + 16)*32 + (nzc9[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc3[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc12[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 16)*32 + (nzc14[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc13[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 16)*32 + (nzc15[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 2808
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 2808
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[5][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F3 += FE0_f0[ip][r]*w[5][nzc3[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 12
          double I[4];
          // Number of operations: 3
          I[0] = F0*F1*G[0]*W6[ip];
          
          // Number of operations: 3
          I[1] = F0*F1*G[1]*W6[ip];
          
          // Number of operations: 3
          I[2] = F2*F3*G[0]*W6[ip];
          
          // Number of operations: 3
          I[3] = F2*F3*G[1]*W6[ip];
          
          
          // Number of operations for primary indices: 432
          for (unsigned int j = 0; j < 3; j++)
          {
            for (unsigned int k = 0; k < 3; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc16[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc17[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc16[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc18[j] + 16)*32 + (nzc18[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc17[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc19[j] + 16)*32 + (nzc19[k] + 16)] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc16[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc17[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc16[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc18[j]*32 + nzc18[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc17[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc19[j]*32 + nzc19[k]] += FE0_f0[ip][j]*FE0_f0[ip][k]*I[2];
            }// end loop over 'k'
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local interior facet
/// using the specified reference cell quadrature points/weights
void bloch_torrey3d_interior_facet_integral_0_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
bloch_torrey3d_cell_integral_1_0::bloch_torrey3d_cell_integral_1_0() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_cell_integral_1_0::~bloch_torrey3d_cell_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local cell
void bloch_torrey3d_cell_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c) const
{
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_02 = x[3][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    const double J_12 = x[3][1] - x[0][1];
    const double J_20 = x[1][2] - x[0][2];
    const double J_21 = x[2][2] - x[0][2];
    const double J_22 = x[3][2] - x[0][2];
    
    // Compute sub determinants
    const double d_00 = J_11*J_22 - J_12*J_21;
    const double d_01 = J_12*J_20 - J_10*J_22;
    const double d_02 = J_10*J_21 - J_11*J_20;
    const double d_10 = J_02*J_21 - J_01*J_22;
    const double d_11 = J_00*J_22 - J_02*J_20;
    const double d_12 = J_01*J_20 - J_00*J_21;
    const double d_20 = J_01*J_12 - J_02*J_11;
    const double d_21 = J_02*J_10 - J_00*J_12;
    const double d_22 = J_00*J_11 - J_01*J_10;
    
    // Compute determinant of Jacobian
    double detJ = J_00*d_00 + J_10*d_10 + J_20*d_20;
    
    // Compute inverse of Jacobian
    const double K_00 = d_00 / detJ;
    const double K_01 = d_10 / detJ;
    const double K_02 = d_20 / detJ;
    const double K_10 = d_01 / detJ;
    const double K_11 = d_11 / detJ;
    const double K_12 = d_21 / detJ;
    const double K_20 = d_02 / detJ;
    const double K_21 = d_12 / detJ;
    const double K_22 = d_22 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W24[24] = {0.00665379170969465, 0.00665379170969465, 0.00665379170969465, 0.00665379170969465, 0.00167953517588678, 0.00167953517588678, 0.00167953517588678, 0.00167953517588678, 0.0092261969239424, 0.0092261969239424, 0.0092261969239424, 0.0092261969239424, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428};
    // Quadrature points on the UFC reference element: (0.356191386222545, 0.214602871259152, 0.214602871259152), (0.214602871259152, 0.214602871259152, 0.214602871259152), (0.214602871259152, 0.214602871259152, 0.356191386222545), (0.214602871259152, 0.356191386222545, 0.214602871259152), (0.877978124396166, 0.0406739585346113, 0.0406739585346113), (0.0406739585346113, 0.0406739585346113, 0.0406739585346113), (0.0406739585346113, 0.0406739585346113, 0.877978124396166), (0.0406739585346113, 0.877978124396166, 0.0406739585346113), (0.0329863295731731, 0.322337890142276, 0.322337890142276), (0.322337890142276, 0.322337890142276, 0.322337890142276), (0.322337890142276, 0.322337890142276, 0.0329863295731731), (0.322337890142276, 0.0329863295731731, 0.322337890142276), (0.269672331458316, 0.0636610018750175, 0.0636610018750175), (0.0636610018750175, 0.269672331458316, 0.0636610018750175), (0.0636610018750175, 0.0636610018750175, 0.269672331458316), (0.603005664791649, 0.0636610018750175, 0.0636610018750175), (0.0636610018750175, 0.603005664791649, 0.0636610018750175), (0.0636610018750175, 0.0636610018750175, 0.603005664791649), (0.0636610018750175, 0.269672331458316, 0.603005664791649), (0.269672331458316, 0.603005664791649, 0.0636610018750175), (0.603005664791649, 0.0636610018750175, 0.269672331458316), (0.0636610018750175, 0.603005664791649, 0.269672331458316), (0.269672331458316, 0.0636610018750175, 0.603005664791649), (0.603005664791649, 0.269672331458316, 0.0636610018750175)
    
    // Value of basis functions at quadrature points.
    static const double FE0[24][4] = \
    {{0.214602871259152, 0.356191386222545, 0.214602871259152, 0.214602871259152},
    {0.356191386222545, 0.214602871259152, 0.214602871259152, 0.214602871259152},
    {0.214602871259152, 0.214602871259152, 0.214602871259152, 0.356191386222545},
    {0.214602871259152, 0.214602871259152, 0.356191386222545, 0.214602871259152},
    {0.0406739585346115, 0.877978124396166, 0.0406739585346114, 0.0406739585346113},
    {0.877978124396166, 0.0406739585346112, 0.0406739585346114, 0.0406739585346113},
    {0.0406739585346115, 0.0406739585346113, 0.0406739585346113, 0.877978124396166},
    {0.0406739585346115, 0.0406739585346113, 0.877978124396166, 0.0406739585346113},
    {0.322337890142276, 0.0329863295731731, 0.322337890142276, 0.322337890142276},
    {0.0329863295731729, 0.322337890142276, 0.322337890142276, 0.322337890142276},
    {0.322337890142276, 0.322337890142276, 0.322337890142276, 0.0329863295731731},
    {0.322337890142276, 0.322337890142276, 0.0329863295731731, 0.322337890142276},
    {0.603005664791649, 0.269672331458316, 0.0636610018750175, 0.0636610018750175},
    {0.603005664791649, 0.0636610018750174, 0.269672331458316, 0.0636610018750175},
    {0.603005664791649, 0.0636610018750175, 0.0636610018750175, 0.269672331458316},
    {0.269672331458316, 0.603005664791649, 0.0636610018750175, 0.0636610018750175},
    {0.269672331458316, 0.0636610018750175, 0.603005664791649, 0.0636610018750175},
    {0.269672331458316, 0.0636610018750175, 0.0636610018750175, 0.603005664791649},
    {0.0636610018750176, 0.0636610018750175, 0.269672331458316, 0.603005664791649},
    {0.0636610018750176, 0.269672331458316, 0.603005664791649, 0.0636610018750175},
    {0.0636610018750177, 0.603005664791649, 0.0636610018750175, 0.269672331458316},
    {0.0636610018750176, 0.0636610018750175, 0.603005664791649, 0.269672331458316},
    {0.0636610018750177, 0.269672331458316, 0.0636610018750175, 0.603005664791649},
    {0.0636610018750177, 0.603005664791649, 0.269672331458316, 0.0636610018750175}};
    
    // Array of non-zero columns
    static const unsigned int nzc4[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc0[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc12[4] = {12, 13, 14, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc8[4] = {8, 9, 10, 11};
    
    static const double FE2_C0_D001[24][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc7[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {12, 14};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc3[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc15[2] = {12, 13};
    
    // Array of non-zero columns
    static const unsigned int nzc11[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {12, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 16; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 246.
    double G[28];
    G[0] = det*w[0][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[1] = det*w[0][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[2] = det*w[0][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[3] =  - det*w[0][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12);
    G[4] =  - det*w[0][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12);
    G[5] =  - det*w[0][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22);
    G[6] = det*w[0][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[7] = det*w[0][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[8] =  - det*w[0][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02);
    G[9] =  - det*w[0][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22);
    G[10] = det*w[0][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[11] =  - det*w[0][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22);
    G[12] = det*(K_00*K_20 + K_01*K_21 + K_02*K_22 - w[0][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[13] = det*(K_10*K_20 + K_11*K_21 + K_12*K_22 - w[0][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[14] = det*(K_20*K_20 + K_21*K_21 + K_22*K_22 - w[0][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[15] = det*(w[0][0]*(K_00*K_20 + K_01*K_21 + K_02*K_22) - (K_00*K_20 + K_01*K_21 + K_02*K_22));
    G[16] = det*(w[0][0]*(K_10*K_20 + K_11*K_21 + K_12*K_22) - (K_10*K_20 + K_11*K_21 + K_12*K_22));
    G[17] = det*(w[0][0]*(K_20*K_20 + K_21*K_21 + K_22*K_22) - (K_20*K_20 + K_21*K_21 + K_22*K_22));
    G[18] = det*(K_00*K_10 + K_01*K_11 + K_02*K_12 - w[0][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[19] = det*(K_10*K_10 + K_11*K_11 + K_12*K_12 - w[0][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[20] = det*(w[0][0]*(K_00*K_10 + K_01*K_11 + K_02*K_12) - (K_00*K_10 + K_01*K_11 + K_02*K_12));
    G[21] = det*(w[0][0]*(K_10*K_10 + K_11*K_11 + K_12*K_12) - (K_10*K_10 + K_11*K_11 + K_12*K_12));
    G[22] = det*(K_00*K_00 + K_01*K_01 + K_02*K_02 - w[0][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[23] = det*(w[0][0]*(K_00*K_00 + K_01*K_01 + K_02*K_02) - (K_00*K_00 + K_01*K_01 + K_02*K_02));
    G[24] = det*(w[0][0]-1.0);
    G[25] = det*(1.0 - w[0][0]);
    G[26] = det*w[0][0];
    G[27] =  - det*w[0][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 10080
    for (unsigned int ip = 0; ip < 24; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 2; r++)
      {
        F6 += FE2_C0_D001[ip][r]*w[1][nzc11[r]];
        F7 += FE2_C0_D001[ip][r]*w[1][nzc10[r]];
        F8 += FE2_C0_D001[ip][r]*w[1][nzc9[r]];
        F10 += FE2_C0_D001[ip][r]*w[1][nzc15[r]];
        F11 += FE2_C0_D001[ip][r]*w[1][nzc14[r]];
        F12 += FE2_C0_D001[ip][r]*w[1][nzc13[r]];
        F15 += FE2_C0_D001[ip][r]*w[1][nzc3[r]];
        F16 += FE2_C0_D001[ip][r]*w[1][nzc2[r]];
        F17 += FE2_C0_D001[ip][r]*w[1][nzc1[r]];
        F19 += FE2_C0_D001[ip][r]*w[1][nzc7[r]];
        F20 += FE2_C0_D001[ip][r]*w[1][nzc6[r]];
        F21 += FE2_C0_D001[ip][r]*w[1][nzc5[r]];
      }// end loop over 'r'
      
      // Total number of operations to compute function values = 80
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[7][r];
        F1 += FE0[ip][r]*w[1][nzc12[r]];
        F2 += FE0[ip][r]*w[2][r];
        F3 += FE0[ip][r]*w[3][r];
        F4 += FE0[ip][r]*w[4][r];
        F5 += FE0[ip][r]*w[5][r];
        F9 += FE0[ip][r]*w[1][nzc8[r]];
        F13 += FE0[ip][r]*w[8][r];
        F14 += FE0[ip][r]*w[1][nzc4[r]];
        F18 += FE0[ip][r]*w[1][nzc0[r]];
      }// end loop over 'r'
      
      // Number of operations to compute ip constants: 212
      double I[16];
      // Number of operations: 14
      I[0] = F5*W24[ip]*(F0*(F6*G[0] + F7*G[1] + F8*G[2]) + F6*G[3] + F7*G[4] + F8*G[5]);
      
      // Number of operations: 14
      I[1] = F5*W24[ip]*(F0*(F6*G[6] + F7*G[0] + F8*G[7]) + F6*G[8] + F7*G[3] + F8*G[9]);
      
      // Number of operations: 14
      I[2] = F5*W24[ip]*(F0*(F10*G[7] + F11*G[2] + F12*G[10]) + F10*G[9] + F11*G[5] + F12*G[11]);
      
      // Number of operations: 14
      I[3] = F5*W24[ip]*(F0*(F10*G[0] + F11*G[1] + F12*G[2]) + F10*G[3] + F11*G[4] + F12*G[5]);
      
      // Number of operations: 14
      I[4] = F5*W24[ip]*(F0*(F10*G[6] + F11*G[0] + F12*G[7]) + F10*G[8] + F11*G[3] + F12*G[9]);
      
      // Number of operations: 14
      I[5] = F5*W24[ip]*(F0*(F15*G[12] + F16*G[13] + F17*G[14]) + F15*G[15] + F16*G[16] + F17*G[17]);
      
      // Number of operations: 14
      I[6] = F5*W24[ip]*(F0*(F15*G[18] + F16*G[19] + F17*G[13]) + F15*G[20] + F16*G[21] + F17*G[16]);
      
      // Number of operations: 14
      I[7] = F5*W24[ip]*(F0*(F15*G[22] + F16*G[18] + F17*G[12]) + F15*G[23] + F16*G[20] + F17*G[15]);
      
      // Number of operations: 14
      I[8] = F5*W24[ip]*(F0*(F19*G[12] + F20*G[13] + F21*G[14]) + F19*G[15] + F20*G[16] + F21*G[17]);
      
      // Number of operations: 14
      I[9] = F5*W24[ip]*(F0*(F19*G[18] + F20*G[19] + F21*G[13]) + F19*G[20] + F20*G[21] + F21*G[16]);
      
      // Number of operations: 14
      I[10] = F5*W24[ip]*(F0*(F19*G[22] + F20*G[18] + F21*G[12]) + F19*G[23] + F20*G[20] + F21*G[15]);
      
      // Number of operations: 14
      I[11] = F5*W24[ip]*(F0*(F6*G[7] + F7*G[2] + F8*G[10]) + F6*G[9] + F7*G[5] + F8*G[11]);
      
      // Number of operations: 11
      I[12] = (F14*F2*F3*F4*W24[ip]*(G[25] + F0*G[24]) + F18*G[25]*W24[ip]/F13);
      
      // Number of operations: 11
      I[13] = (F2*F3*F4*F9*W24[ip]*(G[27] + F0*G[26]) + F1*G[26]*W24[ip]/F13);
      
      // Number of operations: 11
      I[14] = (F18*F2*F3*F4*W24[ip]*(G[24] + F0*G[25]) + F14*G[25]*W24[ip]/F13);
      
      // Number of operations: 11
      I[15] = (F1*F2*F3*F4*W24[ip]*(G[26] + F0*G[27]) + F9*G[26]*W24[ip]/F13);
      
      
      // Number of operations for primary indices: 48
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc10[j]] += FE2_C0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc11[j]] += FE2_C0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE2_C0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE2_C0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc15[j]] += FE2_C0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc1[j]] += FE2_C0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc2[j]] += FE2_C0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc3[j]] += FE2_C0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE2_C0_D001[ip][j]*I[8];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE2_C0_D001[ip][j]*I[9];
        // Number of operations to compute entry: 2
        A[nzc7[j]] += FE2_C0_D001[ip][j]*I[10];
        // Number of operations to compute entry: 2
        A[nzc9[j]] += FE2_C0_D001[ip][j]*I[11];
      }// end loop over 'j'
      
      // Number of operations for primary indices: 32
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc0[j]] += FE0[ip][j]*I[12];
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0[ip][j]*I[13];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0[ip][j]*I[14];
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0[ip][j]*I[15];
      }// end loop over 'j'
    }// end loop over 'ip'
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local cell
/// using the specified reference cell quadrature points/weights
void bloch_torrey3d_cell_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
bloch_torrey3d_interior_facet_integral_1_0::bloch_torrey3d_interior_facet_integral_1_0() : ufc::interior_facet_integral()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_interior_facet_integral_1_0::~bloch_torrey3d_interior_facet_integral_1_0()
{
    // Do nothing
}

/// Tabulate the tensor for the contribution from a local interior facet
void bloch_torrey3d_interior_facet_integral_1_0::tabulate_tensor(double* A,
                                    const double * const * w,
                                    const ufc::cell& c0,
                                    const ufc::cell& c1,
                                    unsigned int facet0,
                                    unsigned int facet1) const
{
    // Extract vertex coordinates
    const double * const * x0 = c0.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Extract vertex coordinates
    
    // Compute Jacobian of affine map from reference cell
    
    // Compute sub determinants
    
    // Compute determinant of Jacobian
    
    // Compute inverse of Jacobian
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet0][0];
    const unsigned int v1 = face_vertices[facet0][1];
    const unsigned int v2 = face_vertices[facet0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (x0[v0][1]*x0[v1][2] + x0[v0][2]*x0[v2][1] + x0[v1][1]*x0[v2][2]) - (x0[v2][1]*x0[v1][2] + x0[v2][2]*x0[v0][1] + x0[v1][1]*x0[v0][2]);
    
    const double a1 = (x0[v0][2]*x0[v1][0] + x0[v0][0]*x0[v2][2] + x0[v1][2]*x0[v2][0]) - (x0[v2][2]*x0[v1][0] + x0[v2][0]*x0[v0][2] + x0[v1][2]*x0[v0][0]);
    
    const double a2 = (x0[v0][0]*x0[v1][1] + x0[v0][1]*x0[v2][0] + x0[v1][0]*x0[v2][1]) - (x0[v2][0]*x0[v1][1] + x0[v2][1]*x0[v0][0] + x0[v1][0]*x0[v0][1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Cell Volume.
    
    // Compute circumradius.
    
    
    
    // Facet Area (divide by two because 'det' is scaled by area of reference triangle).
    
    // Array of quadrature weights.
    static const double W6[6] = {0.054975871827661, 0.054975871827661, 0.054975871827661, 0.111690794839005, 0.111690794839005, 0.111690794839005};
    // Quadrature points on the UFC reference element: (0.816847572980459, 0.091576213509771), (0.091576213509771, 0.816847572980459), (0.091576213509771, 0.091576213509771), (0.10810301816807, 0.445948490915965), (0.445948490915965, 0.10810301816807), (0.445948490915965, 0.445948490915965)
    
    // Value of basis functions at quadrature points.
    static const double FE0_f0[6][3] = \
    {{0.09157621350977, 0.816847572980459, 0.091576213509771},
    {0.0915762135097701, 0.091576213509771, 0.816847572980459},
    {0.816847572980458, 0.091576213509771, 0.091576213509771},
    {0.445948490915965, 0.10810301816807, 0.445948490915965},
    {0.445948490915965, 0.445948490915965, 0.10810301816807},
    {0.10810301816807, 0.445948490915965, 0.445948490915965}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc2[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc3[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc7[3] = {13, 14, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc13[3] = {4, 5, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc12[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc15[3] = {12, 13, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc14[3] = {8, 9, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc18[3] = {8, 9, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc19[3] = {12, 13, 14};
    
    // Array of non-zero columns
    static const unsigned int nzc16[3] = {0, 1, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc17[3] = {4, 5, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc8[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc9[3] = {4, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc10[3] = {8, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc11[3] = {12, 14, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 32; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    // Number of operations to compute geometry constants: 8.
    double G[2];
    G[0] = 0.5*std::abs((w[0][0] - w[0][1]))*det;
    G[1] = -0.5*std::abs((w[0][0] - w[0][1]))*det;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet0)
    {
    case 0:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc4[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc6[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc5[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc7[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc0[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc7[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc4[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc5[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc6[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc7[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc4[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc5[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc6[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc7[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc8[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc10[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc9[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc11[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc0[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc7[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc10[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc11[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc8[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc9[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc4[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc5[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc6[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc7[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc12[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc14[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc13[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc15[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc0[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc7[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc4[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc5[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc6[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc7[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc16[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc18[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc17[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc19[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc0[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc0[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc7[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc16[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc17[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc18[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc19[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc4[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc5[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc6[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc7[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc4[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc6[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc5[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc7[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc1[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc8[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc10[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc9[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc11[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc4[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc5[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc6[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc7[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc10[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc11[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc8[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc9[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc8[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc10[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc9[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc11[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc1[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc8[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc10[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc9[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc11[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc10[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc11[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc8[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc9[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc10[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc11[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc8[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc9[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc12[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc14[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc13[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc15[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc1[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc8[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc10[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc9[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc11[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc10[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc11[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc8[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc9[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc16[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc18[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc17[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc19[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc1[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc1[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc8[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc10[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc9[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc11[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc16[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc17[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc18[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc19[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc10[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc11[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc8[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc9[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc4[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc6[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc5[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc7[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc2[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc12[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc14[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc13[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc15[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc4[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc5[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc6[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc7[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc8[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc10[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc9[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc11[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc2[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc12[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc14[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc13[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc15[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc10[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc11[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc8[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc9[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc12[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc14[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc13[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc15[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc2[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc12[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc14[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc13[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc15[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc16[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc18[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc17[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc19[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc2[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc2[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc12[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc14[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc13[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc15[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc16[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc17[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc18[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc19[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc0[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc0[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc4[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc6[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc5[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc7[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc3[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc16[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc18[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc17[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc19[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc4[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc5[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc6[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc7[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc16[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc17[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc18[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc19[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc1[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc1[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc8[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc10[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc9[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc11[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc3[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc16[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc18[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc17[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc19[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc10[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc11[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc8[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc9[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc16[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc17[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc18[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc19[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc2[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc2[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc12[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc14[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc13[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc15[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc3[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc16[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc18[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc17[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc19[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc16[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc17[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc18[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc19[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1152
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1152
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          
          // Total number of operations to compute function values = 72
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[7][nzc3[r] + 4];
            F1 += FE0_f0[ip][r]*w[6][nzc3[r] + 4];
            F2 += FE0_f0[ip][r]*w[1][nzc16[r] + 16];
            F3 += FE0_f0[ip][r]*w[1][nzc18[r] + 16];
            F4 += FE0_f0[ip][r]*w[1][nzc17[r] + 16];
            F5 += FE0_f0[ip][r]*w[1][nzc19[r] + 16];
            F6 += FE0_f0[ip][r]*w[7][nzc3[r]];
            F7 += FE0_f0[ip][r]*w[6][nzc3[r]];
            F8 += FE0_f0[ip][r]*w[1][nzc16[r]];
            F9 += FE0_f0[ip][r]*w[1][nzc18[r]];
            F10 += FE0_f0[ip][r]*w[1][nzc17[r]];
            F11 += FE0_f0[ip][r]*w[1][nzc19[r]];
          }// end loop over 'r'
          
          // Number of operations to compute ip constants: 72
          double I[8];
          // Number of operations: 9
          I[0] = F1*W6[ip]*(G[0]*(F3 + F0*F2) + G[1]*(F2 + F0*F3));
          
          // Number of operations: 9
          I[1] = F1*W6[ip]*(G[0]*(F5 + F0*F4) + G[1]*(F4 + F0*F5));
          
          // Number of operations: 9
          I[2] = F1*W6[ip]*(G[0]*(F2 + F0*F3) + G[1]*(F3 + F0*F2));
          
          // Number of operations: 9
          I[3] = F1*W6[ip]*(G[0]*(F4 + F0*F5) + G[1]*(F5 + F0*F4));
          
          // Number of operations: 9
          I[4] = F7*W6[ip]*(G[0]*(F9 + F6*F8) + G[1]*(F8 + F6*F9));
          
          // Number of operations: 9
          I[5] = F7*W6[ip]*(G[0]*(F11 + F10*F6) + G[1]*(F10 + F11*F6));
          
          // Number of operations: 9
          I[6] = F7*W6[ip]*(G[0]*(F8 + F6*F9) + G[1]*(F9 + F6*F8));
          
          // Number of operations: 9
          I[7] = F7*W6[ip]*(G[0]*(F10 + F11*F6) + G[1]*(F11 + F10*F6));
          
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc16[j] + 16)] += FE0_f0[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc17[j] + 16)] += FE0_f0[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc18[j] + 16)] += FE0_f0[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc19[j] + 16)] += FE0_f0[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc16[j]] += FE0_f0[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc17[j]] += FE0_f0[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc18[j]] += FE0_f0[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc19[j]] += FE0_f0[ip][j]*I[7];
          }// end loop over 'j'
        }// end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Tabulate the tensor for the contribution from a local interior facet
/// using the specified reference cell quadrature points/weights
void bloch_torrey3d_interior_facet_integral_1_0::tabulate_tensor(double* A,
                     const double * const * w,
                     const ufc::cell& c,
                     unsigned int num_quadrature_points,
                     const double * const * quadrature_points,
                     const double* quadrature_weights) const
{
    throw std::runtime_error("Quadrature version of tabulate_tensor not yet implemented (introduced in UFC 2.0).");
}
#endif

/// Constructor
bloch_torrey3d_form_0::bloch_torrey3d_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_form_0::~bloch_torrey3d_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* bloch_torrey3d_form_0::signature() const
{
    return "Form([Integral(Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0), Sum(Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {})), Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((FixedIndex(2),), {})), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((FixedIndex(2),), {})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3}))))), Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {})), Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2)))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((FixedIndex(3),), {})), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((FixedIndex(3),), {})), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3})))))))), Sum(Product(Division(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {})))))), Product(Sum(IntValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0))), Sum(Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {})), Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(7),), {Index(7): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(7),), {Index(7): 3}))))), Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {})), Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 1), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2)))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(10),), {Index(10): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3})))))))), Sum(Product(Division(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {}))), Product(Division(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {}))))))), Measure('cell', 0, None)), Integral(Product(Abs(Sum(PositiveRestricted(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0)), Product(IntValue(-1, (), (), {}), NegativeRestricted(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0))))), Product(FloatValue(0.5, (), (), {}), Sum(NegativeRestricted(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {}))))), Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {})))))))), PositiveRestricted(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {}))))), Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {}))))))))))), Measure('interior_facet', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int bloch_torrey3d_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
unsigned int bloch_torrey3d_form_0::num_coefficients() const
{
    return 8;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int bloch_torrey3d_form_0::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int bloch_torrey3d_form_0::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int bloch_torrey3d_form_0::num_interior_facet_domains() const
{
    return 1;
}
#else

/// Return the number of cell domains
unsigned int bloch_torrey3d_form_0::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int bloch_torrey3d_form_0::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int bloch_torrey3d_form_0::num_interior_facet_integrals() const
{
    return 1;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* bloch_torrey3d_form_0::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_finite_element_2();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_finite_element_0();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 5:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 6:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 7:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 8:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 9:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* bloch_torrey3d_form_0::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_dofmap_0();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 6:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 7:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 8:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 9:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* bloch_torrey3d_form_0::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_dofmap_0();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 6:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 7:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 8:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 9:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* bloch_torrey3d_form_0::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* bloch_torrey3d_form_0::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* bloch_torrey3d_form_0::create_interior_facet_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_interior_facet_integral_0_0();
        break;
      }
    }
    
    return 0;
}

/// Constructor
bloch_torrey3d_form_1::bloch_torrey3d_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
bloch_torrey3d_form_1::~bloch_torrey3d_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* bloch_torrey3d_form_1::signature() const
{
    return "Form([Integral(Sum(Product(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0), Sum(Product(Sum(IntValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7))), Sum(Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {})), Product(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((FixedIndex(2),), {})), MultiIndex((Index(0),), {Index(0): 3})), MultiIndex((Index(1),), {Index(1): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((FixedIndex(2),), {})), MultiIndex((Index(2),), {Index(2): 3})), MultiIndex((Index(1),), {Index(1): 3}))), MultiIndex((Index(1),), {Index(1): 3}))))), Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {})), Product(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3)))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((FixedIndex(3),), {})), MultiIndex((Index(3),), {Index(3): 3})), MultiIndex((Index(4),), {Index(4): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((FixedIndex(3),), {})), MultiIndex((Index(5),), {Index(5): 3})), MultiIndex((Index(4),), {Index(4): 3}))), MultiIndex((Index(4),), {Index(4): 3}))))))), Sum(Product(Division(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {}))), Product(Division(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {})))))), Product(Sum(IntValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0))), Sum(Product(Sum(IntValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7))), Sum(Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {})), Product(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(6),), {Index(6): 3})), MultiIndex((Index(7),), {Index(7): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((FixedIndex(0),), {})), MultiIndex((Index(8),), {Index(8): 3})), MultiIndex((Index(7),), {Index(7): 3}))), MultiIndex((Index(7),), {Index(7): 3}))))), Sum(Product(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {})), Product(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 2), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 4), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 3)))))), Product(IntValue(-1, (), (), {}), Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 5), IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(9),), {Index(9): 3})), MultiIndex((Index(10),), {Index(10): 3})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((FixedIndex(1),), {})), MultiIndex((Index(11),), {Index(11): 3})), MultiIndex((Index(10),), {Index(10): 3}))), MultiIndex((Index(10),), {Index(10): 3}))))))), Sum(Product(Division(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {}))), Product(Division(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 8)), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {}))))))), Measure('cell', 0, None)), Integral(Product(IntValue(-1, (), (), {}), Product(Abs(Sum(PositiveRestricted(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0)), Product(IntValue(-1, (), (), {}), NegativeRestricted(Coefficient(FiniteElement('Discontinuous Lagrange', Cell('tetrahedron', Space(3)), 0, None), 0))))), Product(FloatValue(0.5, (), (), {}), Sum(NegativeRestricted(Product(Sum(IntValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7))), Sum(Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {}))))), Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {})))))))), PositiveRestricted(Product(Sum(IntValue(1, (), (), {}), Product(IntValue(-1, (), (), {}), Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 7))), Sum(Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(2),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(0),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(2),), {}))))), Product(Product(Coefficient(FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), 6), Sum(Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Coefficient(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 1), MultiIndex((FixedIndex(3),), {}))))), Sum(Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(1),), {})), Product(IntValue(-1, (), (), {}), Indexed(Argument(MixedElement(*[FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None), FiniteElement('Lagrange', Cell('tetrahedron', Space(3)), 1, None)], **{'value_shape': (4,) }), 0), MultiIndex((FixedIndex(3),), {})))))))))))), Measure('interior_facet', 0, None))])";
}

/// Return the rank of the global tensor (r)
unsigned int bloch_torrey3d_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
unsigned int bloch_torrey3d_form_1::num_coefficients() const
{
    return 9;
}
 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Return the number of cell domains
unsigned int bloch_torrey3d_form_1::num_cell_domains() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int bloch_torrey3d_form_1::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int bloch_torrey3d_form_1::num_interior_facet_domains() const
{
    return 1;
}
#else

/// Return the number of cell domains
unsigned int bloch_torrey3d_form_1::num_cell_integrals() const
{
    return 1;
}

/// Return the number of exterior facet domains
unsigned int bloch_torrey3d_form_1::num_exterior_facet_integrals() const
{
    return 0;
}

/// Return the number of interior facet domains
unsigned int bloch_torrey3d_form_1::num_interior_facet_integrals() const
{
    return 1;
}

#endif

/// Create a new finite element for argument function i
ufc::finite_element* bloch_torrey3d_form_1::create_finite_element(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_finite_element_2();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_finite_element_0();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_finite_element_2();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 4:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 5:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 6:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 7:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 8:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    case 9:
      {
        return new bloch_torrey3d_finite_element_1();
        break;
      }
    }
    
    return 0;
}

 #ifndef UFC_BACKWARD_COMPATIBILITY 
/// Create a new dofmap for argument function i
ufc::dofmap* bloch_torrey3d_form_1::create_dofmap(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_dofmap_0();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 6:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 7:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 8:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 9:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#else

/// Create a new dofmap for argument function i
ufc::dof_map* bloch_torrey3d_form_1::create_dof_map(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 1:
      {
        return new bloch_torrey3d_dofmap_0();
        break;
      }
    case 2:
      {
        return new bloch_torrey3d_dofmap_2();
        break;
      }
    case 3:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 4:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 5:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 6:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 7:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 8:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    case 9:
      {
        return new bloch_torrey3d_dofmap_1();
        break;
      }
    }
    
    return 0;
}
#endif
/// Create a new cell integral on sub domain i
ufc::cell_integral* bloch_torrey3d_form_1::create_cell_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_cell_integral_1_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* bloch_torrey3d_form_1::create_exterior_facet_integral(unsigned int i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* bloch_torrey3d_form_1::create_interior_facet_integral(unsigned int i) const
{
    switch (i)
    {
    case 0:
      {
        return new bloch_torrey3d_interior_facet_integral_1_0();
        break;
      }
    }
    
    return 0;
}

