# Copyright (C) 2017 Van-Dang Nguyen (vdnguyen@kth.se)

# This file is part of FEniCS
#
# FEniCS is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

Ve = FiniteElement("CG", tetrahedron, 1)
TH = MixedElement([Ve,Ve])

v = TestFunction(TH)
vr, vi = v[0], v[1]

w = TrialFunction(TH);
ur, ui = w[0], w[1]

u_0= Coefficient(TH)
ur_0, ui_0 = u_0[0], u_0[1]

GX = Coefficient(Ve)
ft_a = Coefficient(TH)
ft = ft_a[0];

gnorm = Coefficient(Ve)
K = Coefficient(Ve)
theta = Coefficient(Ve)
dt = Coefficient(Ve)

def FuncF(ft, gnorm, GX, ur, ui, vr, vi, K):
    Fr = ft*gnorm*GX*ui*vr - K*inner(grad(ur), grad(vr))
    Fi = - ft*gnorm*GX*ur*vi - K*inner(grad(ui), grad(vi))
    return Fr + Fi

def ThetaMethod_L(ft, gnorm, GX,  ur,  ui, vr, vi, dt, K, theta, ur_0, ui_0):
    L = (ur_0/dt*vr + ui_0/dt*vi+(1-theta)*FuncF(ft, gnorm, GX, ur_0, ui_0, vr, vi, K))*dx
    return L

def ThetaMethod_a(ft, gnorm, GX, ur, ui, vr, vi, dt, K, theta):
    a = (ur/dt*vr   + ui/dt*vi  -theta*FuncF(ft, gnorm, GX, ur , ui , vr, vi, K))*dx
    return a

a = ThetaMethod_a(ft, gnorm, GX, ur, ui, vr, vi, dt, K, theta)
L = ThetaMethod_L(ft, gnorm, GX, ur, ui, vr, vi, dt, K, theta, ur_0, ui_0)